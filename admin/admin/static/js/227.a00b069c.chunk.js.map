{"version":3,"file":"static/js/227.a00b069c.chunk.js","mappings":"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","sources":["constants/Data.constant.js","services/AppSetting.js","services/Ops.js","views/users/User.js"],"sourcesContent":["// const mainUrl = `http://localhost:8000/`\r\nconst mainUrl = `http://178.16.137.208:8000/`\r\n// const mainUrl = `https://api.sevenstartambola.com/`\r\n// const mainUrl = `http://api.sevenstartambola.com/`\r\nconst base = {\r\n  adminLogin: mainUrl + `adminLogin`,\r\n  saveAgent: mainUrl + `saveAgent`,\r\n  agentsList: mainUrl + `agentsList`,\r\n  editAgent: mainUrl + `editAgent`,\r\n  deleteAgent: mainUrl + `deleteAgent`,\r\n  saveUser: mainUrl + `saveUser`,\r\n  usersList: mainUrl + `usersList`,\r\n  editUser: mainUrl + `editUser`,\r\n  deleteUser: mainUrl + `deleteUser`,\r\n  // saveTicket: mainUrl + `saveTicket`,\r\n  // ticketList: mainUrl + `ticketList`,\r\n  // editTicket: mainUrl + `editTicket`,\r\n  // deleteTicket: mainUrl + `deleteTicket`,\r\n  ticketCardView: mainUrl + `ticketCardView`,\r\n  gameList: mainUrl + `gameList`,\r\n  saveGame: mainUrl + `saveGame`,\r\n  editGame: mainUrl + `editGame`,\r\n  saveAnnouncement: mainUrl + `saveAnnouncement`,\r\n  announcementList: mainUrl + `announcementList`,\r\n  editAnnouncement: mainUrl + `editAnnouncement`,\r\n  deleteAnnouncement: mainUrl + `deleteAnnouncement`,\r\n  disclaimerList: mainUrl + `disclaimerList`,\r\n  editDisclaimer: mainUrl + `editDisclaimer`,\r\n  agentDetails: mainUrl + 'agentDetails',\r\n  agentPaidAmount: mainUrl + 'agentPaidAmount',\r\n  agentTransacationList: mainUrl + 'agentTransacationList',\r\n  walletAction: mainUrl + 'walletAction',\r\n  startGame: mainUrl + 'matchedTicketForBooking',\r\n}\r\nexport { base }\r\n","import { base } from \"src/constants/Data.constant\";\r\nimport * as opsService from \"./Ops\";\r\n\r\nconst postApiCall = async (url, request) => {\r\n    let token = localStorage.getItem(\"token\");\r\n    try {\r\n        let result = await opsService.postData(\r\n            url,\r\n            request,\r\n            token\r\n        );\r\n        // console.log(\"resultPostdata\", result);\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n}, putApiCall = async (url, request) => {\r\n    let token = localStorage.getItem(\"token\");\r\n\r\n    try {\r\n        let result = await opsService.putData(\r\n            url,\r\n            request,\r\n            token\r\n        );\r\n        // console.log(\"resultPostdata\", result);\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n}, getApiCall = async (url) => {\r\n    try {\r\n        let result = await opsService.getData(\r\n            url,\r\n            false\r\n        );\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n};\r\nexport { postApiCall, getApiCall, putApiCall };\r\n","import axios from \"axios\";\r\n\r\nconst postData = async (url = \"\", data, token = false) => {\r\n    // console.log(\"url\",url)\r\n    let tokenData = \"\";\r\n    if (token) {\r\n        tokenData = \"Bearer \" + token;\r\n    }\r\n    var header = { headers: { Authorization: tokenData } };\r\n    let response = await axios.post(url, data, header);\r\n    // let response = await axios.post(url, data, { headers:  { \"Authorization\": tokenData }});\r\n    return response.data;\r\n};\r\nconst postDataContent = async (url = \"\", data, token = false, contentType) => {\r\n    let tokenData = \"\";\r\n    if (token) {\r\n        tokenData = \"Bearer \" + token;\r\n    }\r\n    // console.log('contentType', contentType)\r\n    let response = await axios.post(url, data, {\r\n        headers: { Authorization: tokenData, \"content-type\": contentType },\r\n    });\r\n    return response.data;\r\n};\r\nconst putData = async (url = \"\", data, token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    let response = await axios.put(url, data, {\r\n        headers: { Authorization: token },\r\n    });\r\n    return response.data;\r\n};\r\nconst getData = async (url = \"\", token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    var header = { headers: { Authorization: token } };\r\n    let response = await axios.get(url, header);\r\n    return response.data;\r\n};\r\nconst deleteData = async (url = \"\", token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    let response = await axios.delete(url, {\r\n        headers: { Authorization: token },\r\n    });\r\n    return response.data;\r\n};\r\nexport async function downloadFile(fileUrl, data, token = false) {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    axios\r\n        .post(fileUrl, data, {\r\n            responseType: \"blob\",\r\n            headers: { Authorization: token },\r\n        })\r\n        .then(function (response) {\r\n            const type = response.headers[\"content-type\"];\r\n            const blob = new Blob([response.data], {\r\n                type: type,\r\n                encoding: \"UTF-8\",\r\n            });\r\n            const link = document.createElement(\"a\");\r\n            link.href = window.URL.createObjectURL(blob);\r\n            link.download = data.fileName;\r\n            link.click();\r\n        });\r\n}\r\n\r\nexport { postData, getData, deleteData, putData, postDataContent };\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CFormSwitch,\r\n  CFormTextarea,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableCaption,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { getApiCall, postApiCall, putApiCall } from 'src/services/AppSetting';\r\nimport { base } from 'src/constants/Data.constant';\r\nimport Toast from 'src/components/toast/Toast';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst User = () => {\r\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\r\n  const [itemValue, setItemValue] = useState(\"\");\r\n  const [editModalVisible, setEditModalVisible] = useState(false);\r\n  const [usersData, setUserData] = useState([]);\r\n  const [visible, setVisible] = useState(false)\r\n  const [id, setId] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [gender, setGender] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    users_list();\r\n  }, []);\r\n\r\n  const users_list = async () => {\r\n    let result = await getApiCall(base.usersList)\r\n    setUserData(result)\r\n  }\r\n\r\n  const save_user = async () => {\r\n    let req = {\r\n      name: name.target.value,\r\n      email: email.target.value,\r\n      phone: phone.target.value,\r\n      gender: gender\r\n    }\r\n    console.log(\"saveUserApiCallreq\", req);\r\n    let result = await postApiCall(base.saveUser, req)\r\n    console.log(\"saveUserApiCall\", result);\r\n    if (result.code == 200) {\r\n      setVisible(false);\r\n      successToast();\r\n      // <Toast />\r\n    }\r\n  }\r\n\r\n  const successToast = () => {\r\n    toast.success('Success !', {\r\n      position: toast.POSITION.TOP_RIGHT\r\n    })\r\n  }\r\n\r\n  // const showToasts = () => {\r\n  //   //     toast.success(\"Successfully Created.!\");\r\n  //   //     toast.error(\"I'm never gonna toast you!\");\r\n  //   //     toast.warning(\"I'm never gonna toast you!\");\r\n  //   //     toast.info(\"I'm never gonna toast you!\");\r\n  // }\r\n\r\n  const delete_user = async (value) => {\r\n    let req = {\r\n      id: value.users_id,\r\n      status: \"1\"\r\n    }\r\n    let result = await putApiCall(base.deleteUser, req)\r\n    if (result.code == 200) {\r\n      toast.error(\"Deleted Successfully..!\");\r\n    }\r\n  }\r\n\r\n  const get_edit_value = async (item) => {\r\n    // console.log(\"getEditValueitemmm\", item);\r\n    setEditModalVisible(true);\r\n    setId(item.users_id);\r\n    setName(item.users_name);\r\n    setEmail(item.users_email);\r\n    setPhone(item.users_phone);\r\n    setGender(item.users_gender);\r\n  }\r\n\r\n  const edit_user = async () => {\r\n    let req = {\r\n      id: id,\r\n      name: name,\r\n      email: email,\r\n      phone: phone,\r\n      gender: gender,\r\n    }\r\n    // console.log(\"reqofedituser\", req);\r\n    let result = await putApiCall(base.editUser, req)\r\n    // console.log(\"resultofedituser\", result);\r\n    if (result.code == 200) {\r\n      setEditModalVisible(false);\r\n      successToast();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12} className='mb-4'>\r\n        <CButton color=\"primary\" onClick={() => { setVisible(true) }} onClose={() => setVisible(false)}>Add</CButton>\r\n        <ToastContainer />\r\n        <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\r\n          <CModalHeader>\r\n            <CModalTitle>Add</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody>\r\n            <CForm>\r\n              <div className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"name\">Name</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  placeholder=\"User Name\"\r\n                  minLength={3}\r\n                  onChange={(e) => { setName(e) }}\r\n                />\r\n                <CFormLabel htmlFor=\"email\">Email address</CFormLabel>\r\n                <CFormInput\r\n                  type=\"email\"\r\n                  id=\"email\"\r\n                  placeholder=\"user@example.com\"\r\n                  onChange={(e) => { setEmail(e) }}\r\n                />\r\n                <CFormLabel htmlFor=\"phone\">Phone</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"phone\"\r\n                  placeholder=\"User Phone\"\r\n                  maxLength={10}\r\n                  onChange={(e) => { setPhone(e) }}\r\n                />\r\n                <CFormLabel htmlFor=\"gender\">Gender</CFormLabel>\r\n                <CFormSelect defaultValue={gender} id=\"gender\" onChange={(e) => { setGender(e.target.value) }}>\r\n                  <option value=\"\" selected disabled>Select Gender</option>\r\n                  <option value=\"Male\">Male</option>\r\n                  <option value=\"Female\">Female</option>\r\n                  <option value=\"Others\">Others</option>\r\n                </CFormSelect>\r\n              </div>\r\n            </CForm>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"secondary\" onClick={() => setEditModalVisible(false)}>\r\n              Cancel\r\n            </CButton>\r\n            <CButton color=\"primary\" onClick={() => save_user()}>Save</CButton>\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardBody>\r\n            <CTable hover responsive>\r\n              <CTableHead>\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Email</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Phone</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Gender</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {usersData.map((item, index) => {\r\n                  console.log(\"userListtt\", item);\r\n                  return <CTableRow key={index}>\r\n                    <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\r\n                    <CTableDataCell>{item.users_name}</CTableDataCell>\r\n                    <CTableDataCell>{item.users_email}</CTableDataCell>\r\n                    <CTableDataCell>{item.users_phone}</CTableDataCell>\r\n                    <CTableDataCell>{item.users_gender}</CTableDataCell>\r\n                    <CTableDataCell>{item.users_active_status}</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      <CButton color=\"warning\" className='me-2' onClick={() => { get_edit_value(item) }}>Edit</CButton>\r\n                      {/* <CModal alignment=\"center\" visible={editModalVisible} onClose={() => setEditModalVisible(false)}> */}\r\n                      <CModal alignment=\"center\" visible={editModalVisible}>\r\n                        <CModalHeader>\r\n                          <CModalTitle>Edit</CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalBody>\r\n                          <CForm>\r\n                            <div className=\"mb-3\">\r\n                              <CFormLabel htmlFor=\"name\">Name</CFormLabel>\r\n                              <CFormInput\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                placeholder=\"User Name\"\r\n                                onChange={(e) => { setName(e) }}\r\n                                defaultValue={name}\r\n                              />\r\n                              <CFormLabel htmlFor=\"email\">Email address</CFormLabel>\r\n                              <CFormInput\r\n                                type=\"email\"\r\n                                id=\"email\"\r\n                                placeholder=\"user@example.com\"\r\n                                onChange={(e) => { setEmail(e) }}\r\n                                defaultValue={email}\r\n                              />\r\n                              <CFormLabel htmlFor=\"phone\">Phone</CFormLabel>\r\n                              <CFormInput\r\n                                type=\"text\"\r\n                                id=\"phone\"\r\n                                placeholder=\"User Phone\"\r\n                                onChange={(e) => { setPhone(e) }}\r\n                                defaultValue={phone}\r\n                              />\r\n                              <CFormLabel htmlFor=\"gender\">Gender</CFormLabel>\r\n                              <CFormSelect defaultValue={gender} id=\"gender\" onChange={(e) => { setGender(e.target.value) }}>\r\n                                <option value=\"\" selected disabled>Select Gender</option>\r\n                                <option value=\"Male\">Male</option>\r\n                                <option value=\"Female\">Female</option>\r\n                                <option value=\"Others\">Others</option>\r\n                              </CFormSelect>\r\n                            </div>\r\n                          </CForm>\r\n                        </CModalBody>\r\n                        <CModalFooter>\r\n                          <CButton color=\"secondary\" onClick={() => setEditModalVisible(false)}>\r\n                            Cancel\r\n                          </CButton>\r\n                          <CButton color=\"primary\" onClick={() => edit_user()}>Update</CButton>\r\n                        </CModalFooter>\r\n                      </CModal>\r\n                      <CButton color=\"danger\" onClick={() => { setItemValue(item); setDeleteModalVisible(true) }}>Delete</CButton>\r\n                      <CModal alignment=\"center\" visible={deleteModalVisible} onClose={() => setDeleteModalVisible(false)}>\r\n                        <CModalHeader>\r\n                          <CModalTitle>Do You Want to Delete..</CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalFooter>\r\n                          <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n                            Cancel\r\n                          </CButton>\r\n                          <CButton color=\"primary\" onClick={() => delete_user(itemValue)}>Yes., Delete</CButton>\r\n                        </CModalFooter>\r\n                      </CModal>\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                })}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default User"],"names":["mainUrl","base","adminLogin","saveAgent","agentsList","editAgent","deleteAgent","saveUser","usersList","editUser","deleteUser","ticketCardView","gameList","saveGame","editGame","saveAnnouncement","announcementList","editAnnouncement","deleteAnnouncement","disclaimerList","editDisclaimer","agentDetails","agentPaidAmount","agentTransacationList","walletAction","startGame","postApiCall","async","url","request","token","localStorage","getItem","result","arguments","length","undefined","data","tokenData","header","headers","Authorization","axios","post","opsService","e","status","message","putApiCall","put","getApiCall","get","User","deleteModalVisible","setDeleteModalVisible","useState","itemValue","setItemValue","editModalVisible","setEditModalVisible","usersData","setUserData","visible","setVisible","id","setId","name","setName","email","setEmail","phone","setPhone","gender","setGender","useEffect","users_list","successToast","toast","success","position","POSITION","TOP_RIGHT","_jsxs","CRow","children","CCol","xs","className","_jsx","CButton","color","onClick","onClose","ToastContainer","CModal","alignment","CModalHeader","CModalTitle","CModalBody","CForm","CFormLabel","htmlFor","CFormInput","type","placeholder","minLength","onChange","maxLength","CFormSelect","defaultValue","target","value","selected","disabled","CModalFooter","req","console","log","code","save_user","CCard","CCardBody","CTable","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","item","index","CTableDataCell","users_name","users_email","users_phone","users_gender","users_active_status","users_id","get_edit_value","edit_user","error","delete_user"],"sourceRoot":""}