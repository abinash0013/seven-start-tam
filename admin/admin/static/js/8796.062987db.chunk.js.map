{"version":3,"file":"static/js/8796.062987db.chunk.js","mappings":"qLACA,MAAMA,EAAO,8BAGPC,EAAO,CACXC,WAAYF,EAAO,aACnBG,UAAWH,EAAO,YAClBI,WAAYJ,EAAO,aACnBK,UAAWL,EAAO,YAClBM,YAAaN,EAAO,cACpBO,SAAUP,EAAO,WACjBQ,UAAWR,EAAO,YAClBS,SAAUT,EAAO,WACjBU,WAAYV,EAAO,aAKnBW,eAAgBX,EAAO,iBACvBY,SAAUZ,EAAO,WACjBa,SAAUb,EAAO,WACjBc,SAAUd,EAAO,WACjBe,iBAAkBf,EAAO,mBACzBgB,iBAAkBhB,EAAO,mBACzBiB,iBAAkBjB,EAAO,mBACzBkB,mBAAoBlB,EAAO,qBAC3BmB,eAAgBnB,EAAO,iBACvBoB,eAAgBpB,EAAO,iBACvBqB,aAAcrB,EAAU,eACxBsB,gBAAiBtB,EAAU,kBAC3BuB,sBAAuBvB,EAAU,wBACjCwB,aAAcxB,EAAU,eACxByB,UAAWzB,EAAU,0B,2EC7BvB,MAAM0B,EAAcC,MAAOC,EAAKC,KAC5B,IAAIC,EAAQC,aAAaC,QAAQ,SACjC,IACI,IAAIC,QCJKN,iBAA0C,IAAnCC,EAAGM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAAIH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAEN,EAAKI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAErCI,EAAY,GACZR,IACAQ,EAAY,UAAYR,GAE5B,IAAIS,EAAS,CAAEC,QAAS,CAAEC,cAAeH,IAGzC,aAFqBI,EAAAA,EAAMC,KAAKf,EAAKS,EAAME,IAE3BF,IACpB,CDN2BO,CACfhB,EACAC,EACAC,GAGJ,OAAOG,CACX,CAAE,MAAOY,GACL,MAAO,CAAEC,QAAQ,EAAOT,KAAM,CAAC,EAAGU,QAASF,EAAEE,QACjD,GACDC,EAAarB,MAAOC,EAAKC,KACxB,IAAIC,EAAQC,aAAaC,QAAQ,SAEjC,IACI,IAAIC,QCIIN,iBAA0C,IAAnCC,EAAGM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAAIH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAEN,EAAKI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAOxC,OANIJ,IACAA,EAAQ,UAAYA,UAEHY,EAAAA,EAAMO,IAAIrB,EAAKS,EAAM,CACtCG,QAAS,CAAEC,cAAeX,MAEdO,IACpB,CDZ2BO,CACfhB,EACAC,EACAC,GAGJ,OAAOG,CACX,CAAE,MAAOY,GACL,MAAO,CAAEC,QAAQ,EAAOT,KAAM,CAAC,EAAGU,QAASF,EAAEE,QACjD,GACDG,EAAavB,UACZ,IACI,IAAIM,QCCIN,iBAAoC,IAA7BC,EAAGM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIJ,EAAKI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC9BJ,IACAA,EAAQ,UAAYA,GAExB,IAAIS,EAAS,CAAEC,QAAS,CAAEC,cAAeX,IAEzC,aADqBY,EAAAA,EAAMS,IAAIvB,EAAKW,IACpBF,IACpB,CDR2BO,CACfhB,GACA,GAEJ,OAAOK,CACX,CAAE,MAAOY,GACL,MAAO,CAAEC,QAAQ,EAAOT,KAAM,CAAC,EAAGU,QAASF,EAAEE,QACjD,E,wHERJ,MA6LA,EA7LmBK,KACjB,MAAOC,EAAoBC,IAAyBC,EAAAA,EAAAA,WAAS,IACtDC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAAkBC,IAAuBJ,EAAAA,EAAAA,WAAS,IAClDK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,KAC9CO,EAASC,IAAcR,EAAAA,EAAAA,WAAS,IAChCS,EAAcC,IAAmBV,EAAAA,EAAAA,UAAS,KAC1CW,EAAiBC,IAAsBZ,EAAAA,EAAAA,UAAS,KAChDa,EAAmBC,IAAwBd,EAAAA,EAAAA,UAAS,KACpDe,EAAkBC,IAAuBhB,EAAAA,EAAAA,UAAS,KAEzDiB,EAAAA,EAAAA,YAAU,KACRC,GAAiB,GAChB,IAEH,MAAMA,EAAkB9C,UACtB,IAAIM,QAAeiB,EAAAA,EAAAA,IAAWjD,EAAAA,EAAKkB,gBACnCuD,QAAQC,IAAI,qBAAsB1C,GAClC4B,EAAkB5B,EAAO,EAmC3B,OACE2C,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,GAAIC,UAAU,OAAMJ,UAC5BC,EAAAA,EAAAA,KAACI,EAAAA,GAAc,OAkCjBJ,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,GAAGH,UACXC,EAAAA,EAAAA,KAACK,EAAAA,GAAK,CAACF,UAAU,OAAMJ,UACrBC,EAAAA,EAAAA,KAACM,EAAAA,GAAS,CAAAP,UACRF,EAAAA,EAAAA,MAACU,EAAAA,GAAM,CAACC,OAAK,EAACC,YAAU,EAAAV,SAAA,EACtBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAAAX,UACTF,EAAAA,EAAAA,MAACc,EAAAA,GAAS,CAAAZ,SAAA,EACRC,EAAAA,EAAAA,KAACY,EAAAA,GAAgB,CAACC,MAAM,MAAKd,SAAC,OAC9BC,EAAAA,EAAAA,KAACY,EAAAA,GAAgB,CAACC,MAAM,MAAKd,SAAC,WAC9BC,EAAAA,EAAAA,KAACY,EAAAA,GAAgB,CAACC,MAAM,MAAKd,SAAC,aAC9BC,EAAAA,EAAAA,KAACY,EAAAA,GAAgB,CAACC,MAAM,MAAKd,SAAC,YAC9BC,EAAAA,EAAAA,KAACY,EAAAA,GAAgB,CAACC,MAAM,MAAKd,SAAC,iBAGlCC,EAAAA,EAAAA,KAACc,EAAAA,GAAU,CAAAf,SACRlB,EAAekC,KAAI,CAACC,EAAMC,KACzBtB,QAAQC,IAAI,mBAAoBoB,IAE9BnB,EAAAA,EAAAA,MAACc,EAAAA,GAAS,CAAAZ,SAAA,EACRC,EAAAA,EAAAA,KAACY,EAAAA,GAAgB,CAACC,MAAM,MAAKd,SAAEkB,EAAQ,KACvCjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAc,CAAAnB,SAAEiB,EAAKG,oBACtBnB,EAAAA,EAAAA,KAACkB,EAAAA,GAAc,CAAAnB,SAAEiB,EAAKI,sBACtBpB,EAAAA,EAAAA,KAACkB,EAAAA,GAAc,CAAAnB,SAAEiB,EAAKK,qBACtBxB,EAAAA,EAAAA,MAACqB,EAAAA,GAAc,CAAAnB,SAAA,EACbC,EAAAA,EAAAA,KAACsB,EAAAA,GAAO,CACNC,MAAM,UACNpB,UAAU,OACVqB,QAASA,KA/FV5E,WACrB+C,QAAQC,IAAI,SAAUoB,GACtBpC,GAAoB,GACpBM,EAAgB8B,EAAKS,eACrBrC,EAAmB4B,EAAKG,kBACxB7B,EAAqB0B,EAAKI,oBAC1B5B,EAAoBwB,EAAKK,kBAAkB,EA0FnBK,CAAeV,EAAK,EACpBjB,SACH,UAGDF,EAAAA,EAAAA,MAAC8B,EAAAA,GAAM,CAACC,UAAU,SAAS7C,QAASJ,EAAiBoB,SAAA,EACnDC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAY,CAAA9B,UACXC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAW,CAAA/B,SAAC,YAEfC,EAAAA,EAAAA,KAAC+B,EAAAA,GAAU,CAAAhC,UACTC,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CAAAjC,UACJF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,OAAMJ,SAAA,EACnBC,EAAAA,EAAAA,KAACiC,EAAAA,GAAU,CAACC,QAAQ,mBAAkBnC,SAAC,sBACvCC,EAAAA,EAAAA,KAACmC,EAAAA,GAAU,CACTC,KAAK,OACLC,GAAG,kBACHC,YAAY,mBACZC,SAAWzE,IACTsB,EAAmBtB,EAAE0E,OAAOC,MAAM,EAGpCC,aAAcvD,KAEhBa,EAAAA,EAAAA,KAACiC,EAAAA,GAAU,CAACC,QAAQ,QAAOnC,SAAC,wBAC5BC,EAAAA,EAAAA,KAACmC,EAAAA,GAAU,CACTC,KAAK,OACLC,GAAG,oBACHC,YAAY,qBACZC,SAAWzE,IACTwB,EAAqBxB,EAAE,EAEzB4E,aAAcrD,KAEhBW,EAAAA,EAAAA,KAACiC,EAAAA,GAAU,CAACC,QAAQ,mBAAkBnC,SAAC,YACvCF,EAAAA,EAAAA,MAAC8C,EAAAA,GAAW,CACVD,aAAcnD,EACd8C,GAAG,mBACHE,SAAWzE,IACT0B,EAAoB1B,EAAE0E,OAAOC,MAAM,EACnC1C,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UAAQyC,MAAM,GAAGG,UAAQ,EAACC,UAAQ,EAAA9C,SAAC,mBAGnCC,EAAAA,EAAAA,KAAA,UAAQyC,MAAM,SAAQ1C,SAAC,YACvBC,EAAAA,EAAAA,KAAA,UAAQyC,MAAM,WAAU1C,SAAC,wBAKjCF,EAAAA,EAAAA,MAACiD,EAAAA,GAAY,CAAA/C,SAAA,EACXC,EAAAA,EAAAA,KAACsB,EAAAA,GAAO,CAACC,MAAM,YAAYC,QAASA,IAAM5C,GAAoB,GAAOmB,SAAC,YAGtEC,EAAAA,EAAAA,KAACsB,EAAAA,GAAO,CAACC,MAAM,UAAUC,QAASA,IA7IpC5E,WACtB,GAAuB,IAAnBuC,EACF4D,EAAAA,GAAMC,MAAM,sCACP,GAAyB,IAArB3D,EACT0D,EAAAA,GAAMC,MAAM,uCACP,CACL,IAAIC,EAAM,CACRhE,aAAcA,EACdE,gBAAiBA,EACjBE,kBAAmBA,EACnBE,iBAAkBA,GAEpBI,QAAQC,IAAI,SAAUqD,GACtB,IAAI/F,QAAee,EAAAA,EAAAA,IAAW/C,EAAAA,EAAKmB,eAAgB4G,GACnDtD,QAAQC,IAAI,eAAgB1C,GACT,KAAfA,EAAOgG,OACTtE,GAAoB,GACpBc,IACAqD,EAAAA,GAAMI,QAAQ,2BAElB,GAyHgEC,GAAkBrD,SAAC,sBAhEnDkB,mBA8EzB,C","sources":["constants/Data.constant.js","services/AppSetting.js","services/Ops.js","views/disclaimer/Disclaimer.js"],"sourcesContent":["// const mainUrl = `http://localhost:8000/`\r\nconst mainUrl = `http://178.16.137.208:8000/`\r\n// const mainUrl = `https://api.sevenstartambola.com/`\r\n// const mainUrl = `http://api.sevenstartambola.com/`\r\nconst base = {\r\n  adminLogin: mainUrl + `adminLogin`,\r\n  saveAgent: mainUrl + `saveAgent`,\r\n  agentsList: mainUrl + `agentsList`,\r\n  editAgent: mainUrl + `editAgent`,\r\n  deleteAgent: mainUrl + `deleteAgent`,\r\n  saveUser: mainUrl + `saveUser`,\r\n  usersList: mainUrl + `usersList`,\r\n  editUser: mainUrl + `editUser`,\r\n  deleteUser: mainUrl + `deleteUser`,\r\n  // saveTicket: mainUrl + `saveTicket`,\r\n  // ticketList: mainUrl + `ticketList`,\r\n  // editTicket: mainUrl + `editTicket`,\r\n  // deleteTicket: mainUrl + `deleteTicket`,\r\n  ticketCardView: mainUrl + `ticketCardView`,\r\n  gameList: mainUrl + `gameList`,\r\n  saveGame: mainUrl + `saveGame`,\r\n  editGame: mainUrl + `editGame`,\r\n  saveAnnouncement: mainUrl + `saveAnnouncement`,\r\n  announcementList: mainUrl + `announcementList`,\r\n  editAnnouncement: mainUrl + `editAnnouncement`,\r\n  deleteAnnouncement: mainUrl + `deleteAnnouncement`,\r\n  disclaimerList: mainUrl + `disclaimerList`,\r\n  editDisclaimer: mainUrl + `editDisclaimer`,\r\n  agentDetails: mainUrl + 'agentDetails',\r\n  agentPaidAmount: mainUrl + 'agentPaidAmount',\r\n  agentTransacationList: mainUrl + 'agentTransacationList',\r\n  walletAction: mainUrl + 'walletAction',\r\n  startGame: mainUrl + 'matchedTicketForBooking',\r\n}\r\nexport { base }\r\n","import { base } from \"src/constants/Data.constant\";\r\nimport * as opsService from \"./Ops\";\r\n\r\nconst postApiCall = async (url, request) => {\r\n    let token = localStorage.getItem(\"token\");\r\n    try {\r\n        let result = await opsService.postData(\r\n            url,\r\n            request,\r\n            token\r\n        );\r\n        // console.log(\"resultPostdata\", result);\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n}, putApiCall = async (url, request) => {\r\n    let token = localStorage.getItem(\"token\");\r\n\r\n    try {\r\n        let result = await opsService.putData(\r\n            url,\r\n            request,\r\n            token\r\n        );\r\n        // console.log(\"resultPostdata\", result);\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n}, getApiCall = async (url) => {\r\n    try {\r\n        let result = await opsService.getData(\r\n            url,\r\n            false\r\n        );\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n};\r\nexport { postApiCall, getApiCall, putApiCall };\r\n","import axios from \"axios\";\r\n\r\nconst postData = async (url = \"\", data, token = false) => {\r\n    // console.log(\"url\",url)\r\n    let tokenData = \"\";\r\n    if (token) {\r\n        tokenData = \"Bearer \" + token;\r\n    }\r\n    var header = { headers: { Authorization: tokenData } };\r\n    let response = await axios.post(url, data, header);\r\n    // let response = await axios.post(url, data, { headers:  { \"Authorization\": tokenData }});\r\n    return response.data;\r\n};\r\nconst postDataContent = async (url = \"\", data, token = false, contentType) => {\r\n    let tokenData = \"\";\r\n    if (token) {\r\n        tokenData = \"Bearer \" + token;\r\n    }\r\n    // console.log('contentType', contentType)\r\n    let response = await axios.post(url, data, {\r\n        headers: { Authorization: tokenData, \"content-type\": contentType },\r\n    });\r\n    return response.data;\r\n};\r\nconst putData = async (url = \"\", data, token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    let response = await axios.put(url, data, {\r\n        headers: { Authorization: token },\r\n    });\r\n    return response.data;\r\n};\r\nconst getData = async (url = \"\", token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    var header = { headers: { Authorization: token } };\r\n    let response = await axios.get(url, header);\r\n    return response.data;\r\n};\r\nconst deleteData = async (url = \"\", token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    let response = await axios.delete(url, {\r\n        headers: { Authorization: token },\r\n    });\r\n    return response.data;\r\n};\r\nexport async function downloadFile(fileUrl, data, token = false) {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    axios\r\n        .post(fileUrl, data, {\r\n            responseType: \"blob\",\r\n            headers: { Authorization: token },\r\n        })\r\n        .then(function (response) {\r\n            const type = response.headers[\"content-type\"];\r\n            const blob = new Blob([response.data], {\r\n                type: type,\r\n                encoding: \"UTF-8\",\r\n            });\r\n            const link = document.createElement(\"a\");\r\n            link.href = window.URL.createObjectURL(blob);\r\n            link.download = data.fileName;\r\n            link.click();\r\n        });\r\n}\r\n\r\nexport { postData, getData, deleteData, putData, postDataContent };\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CFormTextarea,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableCaption,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { getApiCall, postApiCall, putApiCall } from 'src/services/AppSetting'\r\nimport { base } from 'src/constants/Data.constant'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nconst Disclaimer = () => {\r\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false)\r\n  const [itemValue, setItemValue] = useState('')\r\n  const [editModalVisible, setEditModalVisible] = useState(false)\r\n  const [disclaimerData, setDisclaimerData] = useState([])\r\n  const [visible, setVisible] = useState(false)\r\n  const [disclaimerId, setDisclaimerId] = useState('')\r\n  const [disclaimerTitle, setDisclaimerTitle] = useState('')\r\n  const [disclaimerMessage, setDisclaimerMessage] = useState('')\r\n  const [disclaimerStatus, setDisclaimerStatus] = useState('')\r\n\r\n  useEffect(() => {\r\n    disclaimer_list()\r\n  }, [])\r\n\r\n  const disclaimer_list = async () => {\r\n    let result = await getApiCall(base.disclaimerList)\r\n    console.log('resultresultresult', result)\r\n    setDisclaimerData(result)\r\n  }\r\n\r\n  const get_edit_value = async (item) => {\r\n    console.log('itemmm', item)\r\n    setEditModalVisible(true)\r\n    setDisclaimerId(item.disclaimer_id)\r\n    setDisclaimerTitle(item.disclaimer_title)\r\n    setDisclaimerMessage(item.disclaimer_message)\r\n    setDisclaimerStatus(item.disclaimer_status)\r\n  }\r\n\r\n  const edit_disclaimer = async () => {\r\n    if (disclaimerTitle == '') {\r\n      toast.error('Disclaimer Title is Mandatory')\r\n    } else if (disclaimerMessage == '') {\r\n      toast.error('Disclaimer Message is Mandatory')\r\n    } else {\r\n      let req = {\r\n        disclaimerId: disclaimerId,\r\n        disclaimerTitle: disclaimerTitle,\r\n        disclaimerMessage: disclaimerMessage,\r\n        disclaimerStatus: disclaimerStatus,\r\n      }\r\n      console.log('reqreq', req)\r\n      let result = await putApiCall(base.editDisclaimer, req)\r\n      console.log('resultresult', result)\r\n      if (result.code == 200) {\r\n        setEditModalVisible(false)\r\n        disclaimer_list()\r\n        toast.success('Updated Successfully..!')\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12} className=\"mb-4\">\r\n        <ToastContainer />\r\n        {/* <CButton color=\"primary\" onClick={() => { setVisible(true) }} onClose={() => setVisible(false)}>Add</CButton>\r\n        <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\r\n          <CModalHeader>\r\n            <CModalTitle>Add</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody>\r\n            <CForm>\r\n              <div className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"disclaimerTitle\">Disclaimer Title</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"disclaimerTitle\"\r\n                  placeholder=\"Disclaimer Title\"\r\n                  onChange={(e) => { setDisclaimerTitle(e) }}\r\n                />\r\n                <CFormLabel htmlFor=\"disclaimerMessage\">Disclaimer Message</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"disclaimerMessage\"\r\n                  placeholder=\"Disclaimer Message\"\r\n                  onChange={(e) => { setDisclaimerMessage(e) }}\r\n                />\r\n              </div>\r\n            </CForm>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"secondary\" onClick={() => setEditModalVisible(false)}>\r\n              Cancel\r\n            </CButton>\r\n            <CButton color=\"primary\" onClick={() => save_disclaimer()}>Save</CButton>\r\n          </CModalFooter>\r\n        </CModal> */}\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardBody>\r\n            <CTable hover responsive>\r\n              <CTableHead>\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Message</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {disclaimerData.map((item, index) => {\r\n                  console.log('agentlistitemmmm', item)\r\n                  return (\r\n                    <CTableRow key={index}>\r\n                      <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\r\n                      <CTableDataCell>{item.disclaimer_title}</CTableDataCell>\r\n                      <CTableDataCell>{item.disclaimer_message}</CTableDataCell>\r\n                      <CTableDataCell>{item.disclaimer_status}</CTableDataCell>\r\n                      <CTableDataCell>\r\n                        <CButton\r\n                          color=\"warning\"\r\n                          className=\"me-2\"\r\n                          onClick={() => {\r\n                            get_edit_value(item)\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </CButton>\r\n                        <CModal alignment=\"center\" visible={editModalVisible}>\r\n                          <CModalHeader>\r\n                            <CModalTitle>Edit</CModalTitle>\r\n                          </CModalHeader>\r\n                          <CModalBody>\r\n                            <CForm>\r\n                              <div className=\"mb-3\">\r\n                                <CFormLabel htmlFor=\"Disclaimer Title\">Disclaimer Title</CFormLabel>\r\n                                <CFormInput\r\n                                  type=\"text\"\r\n                                  id=\"disclaimerTitle\"\r\n                                  placeholder=\"Disclaimer Title\"\r\n                                  onChange={(e) => {\r\n                                    setDisclaimerTitle(e.target.value)\r\n                                  }}\r\n                                  // name={name}\r\n                                  defaultValue={disclaimerTitle}\r\n                                />\r\n                                <CFormLabel htmlFor=\"email\">Disclaimer Message</CFormLabel>\r\n                                <CFormInput\r\n                                  type=\"text\"\r\n                                  id=\"disclaimerMessage\"\r\n                                  placeholder=\"Disclaimer Message\"\r\n                                  onChange={(e) => {\r\n                                    setDisclaimerMessage(e)\r\n                                  }}\r\n                                  defaultValue={disclaimerMessage}\r\n                                />\r\n                                <CFormLabel htmlFor=\"disclaimerStatus\">Status</CFormLabel>\r\n                                <CFormSelect\r\n                                  defaultValue={disclaimerStatus}\r\n                                  id=\"disclaimerStatus\"\r\n                                  onChange={(e) => {\r\n                                    setDisclaimerStatus(e.target.value)\r\n                                  }}\r\n                                >\r\n                                  <option value=\"\" selected disabled>\r\n                                    Select Status\r\n                                  </option>\r\n                                  <option value=\"Active\">Active</option>\r\n                                  <option value=\"Deactive\">Deactive</option>\r\n                                </CFormSelect>\r\n                              </div>\r\n                            </CForm>\r\n                          </CModalBody>\r\n                          <CModalFooter>\r\n                            <CButton color=\"secondary\" onClick={() => setEditModalVisible(false)}>\r\n                              Cancel\r\n                            </CButton>\r\n                            <CButton color=\"primary\" onClick={() => edit_disclaimer()}>\r\n                              Update\r\n                            </CButton>\r\n                          </CModalFooter>\r\n                        </CModal>\r\n                      </CTableDataCell>\r\n                    </CTableRow>\r\n                  )\r\n                })}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Disclaimer\r\n"],"names":["mainUrl","base","adminLogin","saveAgent","agentsList","editAgent","deleteAgent","saveUser","usersList","editUser","deleteUser","ticketCardView","gameList","saveGame","editGame","saveAnnouncement","announcementList","editAnnouncement","deleteAnnouncement","disclaimerList","editDisclaimer","agentDetails","agentPaidAmount","agentTransacationList","walletAction","startGame","postApiCall","async","url","request","token","localStorage","getItem","result","arguments","length","undefined","data","tokenData","header","headers","Authorization","axios","post","opsService","e","status","message","putApiCall","put","getApiCall","get","Disclaimer","deleteModalVisible","setDeleteModalVisible","useState","itemValue","setItemValue","editModalVisible","setEditModalVisible","disclaimerData","setDisclaimerData","visible","setVisible","disclaimerId","setDisclaimerId","disclaimerTitle","setDisclaimerTitle","disclaimerMessage","setDisclaimerMessage","disclaimerStatus","setDisclaimerStatus","useEffect","disclaimer_list","console","log","_jsxs","CRow","children","_jsx","CCol","xs","className","ToastContainer","CCard","CCardBody","CTable","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","item","index","CTableDataCell","disclaimer_title","disclaimer_message","disclaimer_status","CButton","color","onClick","disclaimer_id","get_edit_value","CModal","alignment","CModalHeader","CModalTitle","CModalBody","CForm","CFormLabel","htmlFor","CFormInput","type","id","placeholder","onChange","target","value","defaultValue","CFormSelect","selected","disabled","CModalFooter","toast","error","req","code","success","edit_disclaimer"],"sourceRoot":""}